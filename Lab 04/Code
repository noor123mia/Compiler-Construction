using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Collections;

namespace LexicalAnalyzerConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("=== Lexical Analyzer ===");
            string userInput = GetUserInput();
            ProcessLexicalAnalysis(userInput);
            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey();
        }

        static string GetUserInput()
        {
            Console.WriteLine("Enter source code (press Enter twice to finish):");
            string input = "";
            string line;
            int emptyLineCount = 0;

            while (true)
            {
                line = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(line))
                {
                    emptyLineCount++;
                    if (emptyLineCount >= 2)
                        break;
                }
                else
                {
                    emptyLineCount = 0;
                }
                input += line + "\n";
            }
            return input;
        }

        static void ProcessLexicalAnalysis(string userInput)
        {
            List<string> keywordList = new List<string> { "int", "float", "while", "main", "if", "else", "new" };

            string[,] SymbolTable = new string[20, 5];
            int row = 1;
            int count = 1;

            Regex variableReg = new Regex(@"^[A-Za-z_][A-Za-z0-9]*$");
            Regex constantReg = new Regex(@"^[0-9]+(\.[0-9]+)?$");
            Regex operatorReg = new Regex(@"^[-*+/><=]$");
            Regex specialReg = new Regex(@"^[.,;(){}\[\]]$");

            ArrayList finalArray = new ArrayList();
            ArrayList finalArrayc = new ArrayList();
            ArrayList tempArray = new ArrayList();
            List<string> tokensList = new List<string>();
            List<string> symbolTableOutput = new List<string>();
            List<int> lineNumbersPerLine = new List<int>();

            char[] charinput = userInput.ToCharArray();
            int currentLineNumber = 1;

            for (int itr = 0; itr < charinput.Length; itr++)
            {
                Match matchVariable = variableReg.Match(charinput[itr] + "");
                Match matchConstant = constantReg.Match(charinput[itr] + "");
                Match matchOperator = operatorReg.Match(charinput[itr] + "");
                Match matchSpecial = specialReg.Match(charinput[itr] + "");

                if (matchVariable.Success || matchConstant.Success || matchOperator.Success ||
                    matchSpecial.Success || charinput[itr].Equals(' '))
                {
                    tempArray.Add(charinput[itr]);
                }

                if (charinput[itr].Equals('\n'))
                {
                    if (tempArray.Count != 0)
                    {
                        string fin = "";
                        for (int j = 0; j < tempArray.Count; j++)
                        {
                            fin += tempArray[j];
                        }
                        finalArray.Add(fin);
                        lineNumbersPerLine.Add(currentLineNumber); // Save correct line number
                        tempArray.Clear();
                    }
                    currentLineNumber++;
                }
            }

            if (tempArray.Count != 0)
            {
                string fin = "";
                for (int j = 0; j < tempArray.Count; j++)
                {
                    fin += tempArray[j];
                }
                finalArray.Add(fin);
                lineNumbersPerLine.Add(currentLineNumber);
                tempArray.Clear();
            }

            for (int i = 0; i < finalArray.Count; i++)
            {
                string line = finalArray[i].ToString();
                int actualLineNum = lineNumbersPerLine[i];
                char[] lineChar = line.ToCharArray();
                finalArrayc.Clear();

                for (int itr = 0; itr < lineChar.Length; itr++)
                {
                    Match matchVariable = variableReg.Match(lineChar[itr] + "");
                    Match matchConstant = constantReg.Match(lineChar[itr] + "");
                    Match matchOperator = operatorReg.Match(lineChar[itr] + "");
                    Match matchSpecial = specialReg.Match(lineChar[itr] + "");

                    if (matchVariable.Success || matchConstant.Success)
                    {
                        tempArray.Add(lineChar[itr]);
                    }

                    if (lineChar[itr].Equals(' '))
                    {
                        if (tempArray.Count != 0)
                        {
                            string fin = "";
                            for (int j = 0; j < tempArray.Count; j++)
                            {
                                fin += tempArray[j];
                            }
                            finalArrayc.Add(fin);
                            tempArray.Clear();
                        }
                    }

                    if (matchOperator.Success || matchSpecial.Success)
                    {
                        if (tempArray.Count != 0)
                        {
                            string fin = "";
                            for (int j = 0; j < tempArray.Count; j++)
                            {
                                fin += tempArray[j];
                            }
                            finalArrayc.Add(fin);
                            tempArray.Clear();
                        }
                        finalArrayc.Add(lineChar[itr].ToString());
                    }
                }

                if (tempArray.Count != 0)
                {
                    string fin = "";
                    for (int j = 0; j < tempArray.Count; j++)
                    {
                        fin += tempArray[j];
                    }
                    finalArrayc.Add(fin);
                    tempArray.Clear();
                }

                for (int x = 0; x < finalArrayc.Count; x++)
                {
                    string token = finalArrayc[x].ToString();
                    Match operators = operatorReg.Match(token);
                    Match variables = variableReg.Match(token);
                    Match digits = constantReg.Match(token);
                    Match punctuations = specialReg.Match(token);

                    if (operators.Success)
                    {
                        tokensList.Add($"<op, {token}>");
                    }
                    else if (digits.Success)
                    {
                        tokensList.Add($"<digit, {token}>");
                    }
                    else if (punctuations.Success)
                    {
                        tokensList.Add($"<punc, {token}>");
                    }
                    else if (variables.Success)
                    {
                        if (!keywordList.Contains(token))
                        {
                            Regex reg1 = new Regex(@"^(int|float)\s([A-Za-z_][A-Za-z0-9]*)\s(=)\s([0-9]+(\.[0-9]+)?)\s(;)$");
                            Match category1 = reg1.Match(line);

                            if (category1.Success && row < 20)
                            {
                                SymbolTable[row, 0] = row.ToString();
                                SymbolTable[row, 1] = token;
                                SymbolTable[row, 2] = finalArrayc[x - 1].ToString();
                                SymbolTable[row, 3] = finalArrayc[x + 2].ToString();
                                SymbolTable[row, 4] = actualLineNum.ToString();

                                tokensList.Add($"<var{count}, {row}>");
                                symbolTableOutput.Add($"{SymbolTable[row, 0]}\t{SymbolTable[row, 1]}\t{SymbolTable[row, 2]}\t{SymbolTable[row, 3]}\t{SymbolTable[row, 4]}");
                                row++;
                                count++;
                            }
                            else
                            {
                                bool found = false;
                                for (int r = 1; r < row; r++)
                                {
                                    if (SymbolTable[r, 1] == token)
                                    {
                                        tokensList.Add($"<var{r}, {r}>");
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found)
                                {
                                    tokensList.Add($"<identifier, {token}>");
                                }
                            }
                        }
                        else
                        {
                            tokensList.Add($"<keyword, {token}>");
                        }
                    }
                }
            }

            Console.WriteLine("\n=== Tokens ===");
            foreach (string token in tokensList)
            {
                Console.WriteLine(token);
            }

            Console.WriteLine("\n=== Symbol Table ===");
            Console.WriteLine("Index\tName\tType\tValue\tLine");
            Console.WriteLine("-----\t----\t----\t-----\t----");
            if (symbolTableOutput.Count == 0)
            {
                Console.WriteLine("(No variables)");
            }
            else
            {
                foreach (string entry in symbolTableOutput)
                {
                    Console.WriteLine(entry);
                }
            }
        }
    }
}

